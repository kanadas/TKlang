entrypoints Expr;

EInt.           Expr11 ::= Integer;
EChar.          Expr11 ::= Char;
EString.        Expr11 ::= String ;
EIdent.         Expr11 ::= Ident;
ETrue.          Expr11 ::= "true";
EFalse.         Expr11 ::= "false";
EVoid.          Expr11 ::= "()";
EEmpty.         Expr11 ::= "[]";
ENot.           Expr11 ::= "!" Expr11 ;
ETuple.         Expr11 ::= "(" Expr "," [Expr] ")" ;
EList.          Expr11 ::= "[" [Expr] "]" ;
ELambda.        Expr11 ::= "(\\" [Ident] "->" Expr ")" ;
EApp.		    Expr10 ::= Expr10 Expr11 ;
EMul.           Expr9 ::= Expr9 "*" Expr10 ;
EDiv.           Expr9 ::= Expr9 "/" Expr10 ;
EAdd.           Expr8 ::= Expr8 "+" Expr9 ;
ESub.           Expr8 ::= Expr8 "-" Expr9 ;
EConcat.        Expr8 ::= Expr8 "++" Expr9 ;
ENeg.           Expr7 ::= "-" Expr7 ;
ERel.           Expr6 ::= Expr6 RelOp Expr7 ;
EAnd.           Expr5 ::= Expr5 "&" Expr6 ;
EOr.            Expr4 ::= Expr4 "|" Expr5 ;
EAppend.        Expr3 ::= Expr3 ":" Expr4 ;  
EUnion.         Expr2 ::= Integer "@" Expr3 ;
EIf.            Expr1 ::= "if" Expr "then" Expr "else" Expr1 ;
ELet.           Expr1 ::= "let" Ident "=" Expr "in" Expr1 ;
EMatch.         Expr1 ::= "match" Expr "with" "{" [Alternative] "}";
EType.          Expr  ::= Expr1 "::" Type ;
coercions Expr 11 ;

separator nonempty Expr "," ;
separator Ident "";

token RelOp     ('>' | '<' | {"<="} | {">="} | {"=="} | {"!="}) ;

TBasic.         Type3 ::= Basic ;
TIdent.         Type3 ::= Ident ;
TList.          Type3 ::= "[" Type "]" ; --syntax sugar for list type
TProduct.       Type2 ::= Type2 "*" Type3 ;
TUnion.         Type1 ::= Type1 "+" Type2 ;
TFun.           Type ::= Type1 "->" Type ;
coercions Type 3 ;

token Basic     ({"int"} | {"bool"} | {"char"} | {"void"}) ;

MAlternative.   Alternative ::= Pattern "->" Expr ;
separator nonempty Alternative ";" ;

PIdent.         Pattern2 ::= Ident ;
PAny.           Pattern2 ::= "_" ;
PTuple.         Pattern2 ::= "(" Pattern "," [Pattern] ")" ;
PList.          Pattern2 ::= "[" [Pattern] "]" ;
PString.        Pattern2 ::= String ;
PInt.           Pattern2 ::= Integer ;
PChar.          Pattern2 ::= Char ;
PTrue.          Pattern2 ::= "true" ;
PFalse.         Pattern2 ::= "false" ;
--PEmpty.         Pattern2 ::= "[]" ; TODO
--PVoid.          Pattern2 ::= "()" ; TODO
PListHT.        Pattern1 ::= Pattern1 ":" Pattern2 ;
PUnion.         Pattern ::= Integer "@" Pattern ;
coercions Pattern 2 ;

separator nonempty Pattern "," ;

--Qual.           QIdent ::= Ident "." Ident ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

