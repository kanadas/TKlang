entrypoints Program ;

--Program is list of classes and functions

Program.		Program ::= [TopDef] ;
separator nonempty TopDef ";" ;

rules			TopDef ::= VDecl | TDecl | Def | Stream ;

VDecl.          VDecl ::= Ident "::" Type ;
TDecl.          TDecl ::= "type" Ident "is" Type ;
Def.            Def  ::= Ident [Arg] "=" Expr ;

Arg.            Arg ::= Ident ;
separator Arg "";

--Expressions
--TODO tuples, lists, unions syntax sugar

rules           ELit ::= Integer | String | QIdent | "true" | "false" | "()" | "[]" ;
ELit.           Expr11 ::= ELit ;
ENeg.           Expr10 ::= "-" Expr10 ;
ENot.           Expr10 ::= "!" Expr10 ;
EApp.		    Expr9 ::= Expr Expr10 ;
EMul.           Expr8 ::= Expr8 MulOp Expr9 ;
EAdd.           Expr7 ::= Expr7 AddOp Expr8 ;
ERel.           Expr6 ::= Expr6 RelOp Expr7 ;
EAnd.           Expr5 ::= Expr5 "&" Expr6 ;
EOr.            Expr4 ::= Expr4 "|" Expr5 ;
EUnion.         Expr3 ::= Expr3 "@" Expr2 ;  --creates enumerated union
EAppend.        Expr2 ::= Expr2 ":" Expr1 ;  --appends to front of list
ETuple.         Expr2 ::= "(" Expr "," [Expr] ")" ;
EList.          Expr2 ::= "[" [Expr] "]" ;
ELambda.        Expr2 ::= "(\\" [Arg] "->" Expr ")" ;
EIf.            Expr1 ::= "if" Expr "then" Expr "else" Expr ;
ELet.           Expr1 ::= "let" Def "in" Expr ;
EMatch.         Expr1 ::= "match" Expr "with" "{" [Alternative] "}";
EType.          Expr  ::= Expr1 "::" Type ;
coercions Expr 11 ;

--Comma separated Expressions
separator nonempty Expr "," ;

token MulOp     ('*' | '/') ;
token AddOp     ('+' | '-' | ["++"]); -- "++" is list concatenation
token RelOp     ('>' | '<' | ["<="] | [">="] | ["=="] | ["!="]) ;

MAlternative.   Alternative ::= Pattern "->" Expr ;
separator nonempty Alternative ";" ;

PIdent.         Pattern ::= Ident ;
PAny.           Pattern ::= "_" ;
PTuple.         Pattern ::= "(" Pattern "," [Pattern] ")" ;
PList.          Pattern ::= "[" [Pattern] "]" ;
PUnion.         Pattern ::= Integer "@" Pattern ;
PListHT.        Pattern ::= Pattern ":" Pattern ;
PString         Pattern ::= String ;

separator nonempty Pattern "," ;

rules           TBasic ::= "int" | "bool" | "char" | "void" | Ident ;
TBasic.         Type3 ::= TBasic ;
TProduct.       Type2 ::= Type1 "*" Type2 ;
TUnion.         Type1 ::= Type "+" Type1 ;
TFun.           Type ::= Type "->" Type ;
TList.          Type ::= "[" Type "]" ;--syntax sugar for list type
coercions Type 3 ;

--TODO initial state of stream
Stream.         Stream ::= "stream" Ident "input" [VDecl] "state" [TopDef] "output" [TopDef] ;
separator nonempty VDecl "," ;

Qual.           QIdent ::= Ident "." Ident ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

