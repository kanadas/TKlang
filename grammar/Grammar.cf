entrypoints Expr;

rules           Lit ::= Integer | Char | String | Ident | "true" | "false" | "()" | "[]";
ELit.           Expr11 ::= Lit ;
ENot.           Expr11 ::= "!" Expr11 ;
ETuple.         Expr11 ::= "(" Expr "," [Expr] ")" ;
EList.          Expr11 ::= "[" [Expr] "]" ;
ELambda.        Expr11 ::= "(\\" [Ident] "->" Expr ")" ;
EApp.		    Expr10 ::= Expr10 Expr11 ;
EMul.           Expr9 ::= Expr9 "*" Expr10 ;
EDiv.           Expr9 ::= Expr9 "/" Expr10 ;
EAdd.           Expr8 ::= Expr8 "+" Expr9 ;
ESub.           Expr8 ::= Expr8 "-" Expr9 ;
EConcat.        Expr8 ::= Expr8 "++" Expr9 ;
ENeg.           Expr7 ::= "-" Expr7 ;
ERel.           Expr6 ::= Expr6 RelOp Expr7 ;
EAnd.           Expr5 ::= Expr5 "&" Expr6 ;
EOr.            Expr4 ::= Expr4 "|" Expr5 ;
EAppend.        Expr3 ::= Expr3 ":" Expr4 ;  --appends to front of list
EUnion.         Expr2 ::= Expr2 "@" Expr3 ;  --creates enumerated union
EIf.            Expr1 ::= "if" Expr "then" Expr "else" Expr1 ;
--ELet.           Expr1 ::= "let" Def "in" Expr1 ;
--EMatch.         Expr1 ::= "match" Expr "with" "{" [Alternative] "}";
EType.          Expr  ::= Expr1 "::" Type ;
coercions Expr 11 ;

separator nonempty Expr "," ;
separator Ident "";

--token MulOp     ('*' | '/') ;
--token AddOp     ('+' | '-' | {"++"}); -- "++" is list concatenation
token RelOp     ('>' | '<' | {"<="} | {">="} | {"=="} | {"!="}) ;

--MAlternative.   Alternative ::= Pattern "->" Expr ;
--separator nonempty Alternative ";" ;

--PIdent.         Pattern ::= Ident ;
--PAny.           Pattern ::= "_" ;
--PTuple.         Pattern ::= "(" Pattern "," [Pattern] ")" ;
--PList.          Pattern ::= "[" [Pattern] "]" ;
--PUnion.         Pattern ::= Integer "@" Pattern ;
--PListHT.        Pattern ::= Pattern ":" Pattern ;
--PString         Pattern ::= String ;

--separator nonempty Pattern "," ;

rules           Basic ::= "int" | "bool" | "char" | "void" | Ident ;
TBasic.         Type3 ::= Basic ;
TProduct.       Type2 ::= Type2 "*" Type3 ;
TUnion.         Type1 ::= Type1 "+" Type2 ;
TFun.           Type ::= Type1 "->" Type ;
TList.          Type ::= "[" Type "]" ;--syntax sugar for list type
coercions Type 3 ;

--Qual.           QIdent ::= Ident "." Ident ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

