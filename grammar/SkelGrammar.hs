module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transRelOp :: RelOp -> Result
transRelOp x = case x of
  RelOp string -> failure x
transBasic :: Basic -> Result
transBasic x = case x of
  Basic string -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EInt integer -> failure x
  EChar char -> failure x
  EString string -> failure x
  EIdent ident -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EVoid -> failure x
  EEmpty -> failure x
  ENot expr -> failure x
  ETuple expr exprs -> failure x
  EList exprs -> failure x
  ELambda idents expr -> failure x
  EApp expr1 expr2 -> failure x
  EMul expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EAdd expr1 expr2 -> failure x
  ESub expr1 expr2 -> failure x
  EConcat expr1 expr2 -> failure x
  ENeg expr -> failure x
  ERel expr1 relop expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  EOr expr1 expr2 -> failure x
  EAppend expr1 expr2 -> failure x
  EUnion integer expr -> failure x
  EIf expr1 expr2 expr3 -> failure x
  ELet ident expr1 expr2 -> failure x
  EMatch expr alternatives -> failure x
  EType expr type_ -> failure x
transType :: Type -> Result
transType x = case x of
  TBasic basic -> failure x
  TIdent ident -> failure x
  TList type_ -> failure x
  TProduct type_1 type_2 -> failure x
  TUnion type_1 type_2 -> failure x
  TFun type_1 type_2 -> failure x
transAlternative :: Alternative -> Result
transAlternative x = case x of
  MAlternative pattern expr -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PIdent ident -> failure x
  PAny -> failure x
  PTuple pattern patterns -> failure x
  PList patterns -> failure x
  PString string -> failure x
  PListHT pattern1 pattern2 -> failure x
  PUnion integer pattern -> failure x

