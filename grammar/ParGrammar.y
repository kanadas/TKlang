-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  '()' { PT _ (TS _ 4) }
  '(\\' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  ',' { PT _ (TS _ 9) }
  '-' { PT _ (TS _ 10) }
  '->' { PT _ (TS _ 11) }
  '.' { PT _ (TS _ 12) }
  ':' { PT _ (TS _ 13) }
  '::' { PT _ (TS _ 14) }
  ';' { PT _ (TS _ 15) }
  '=' { PT _ (TS _ 16) }
  '@' { PT _ (TS _ 17) }
  '[' { PT _ (TS _ 18) }
  '[]' { PT _ (TS _ 19) }
  ']' { PT _ (TS _ 20) }
  '_' { PT _ (TS _ 21) }
  'bool' { PT _ (TS _ 22) }
  'char' { PT _ (TS _ 23) }
  'else' { PT _ (TS _ 24) }
  'false' { PT _ (TS _ 25) }
  'if' { PT _ (TS _ 26) }
  'in' { PT _ (TS _ 27) }
  'input' { PT _ (TS _ 28) }
  'int' { PT _ (TS _ 29) }
  'is' { PT _ (TS _ 30) }
  'let' { PT _ (TS _ 31) }
  'match' { PT _ (TS _ 32) }
  'output' { PT _ (TS _ 33) }
  'state' { PT _ (TS _ 34) }
  'stream' { PT _ (TS _ 35) }
  'then' { PT _ (TS _ 36) }
  'true' { PT _ (TS _ 37) }
  'type' { PT _ (TS _ 38) }
  'void' { PT _ (TS _ 39) }
  'with' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '|' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_MulOp { PT _ (T_MulOp $$) }
L_AddOp { PT _ (T_AddOp $$) }
L_RelOp { PT _ (T_RelOp $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }
MulOp    :: { MulOp} : L_MulOp { MulOp ($1)}
AddOp    :: { AddOp} : L_AddOp { AddOp ($1)}
RelOp    :: { RelOp} : L_RelOp { RelOp ($1)}

Program :: { Program }
Program : ListTopDef { AbsGrammar.Program $1 }
ListTopDef :: { [TopDef] }
ListTopDef : {- empty -} { [] }
           | TopDef { (:[]) $1 }
           | TopDef ';' ListTopDef { (:) $1 $3 }
TopDef :: { TopDef }
TopDef : VDecl { AbsGrammar.TopDefVDecl $1 }
       | TDecl { AbsGrammar.TopDefTDecl $1 }
       | Def { AbsGrammar.TopDefDef $1 }
       | Stream { AbsGrammar.TopDefStream $1 }
VDecl :: { VDecl }
VDecl : Ident '::' Type { AbsGrammar.VDecl $1 $3 }
TDecl :: { TDecl }
TDecl : 'type' Ident 'is' Type { AbsGrammar.TDecl $2 $4 }
Def :: { Def }
Def : Ident ListArg '=' Expr { AbsGrammar.Def $1 (reverse $2) $4 }
Arg :: { Arg }
Arg : Ident { AbsGrammar.Arg $1 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] } | ListArg Arg { flip (:) $1 $2 }
ELit :: { ELit }
ELit : Integer { AbsGrammar.ELitInteger $1 }
     | String { AbsGrammar.ELitString $1 }
     | QIdent { AbsGrammar.ELitQIdent $1 }
     | 'true' { AbsGrammar.ELit_true }
     | 'false' { AbsGrammar.ELit_false }
     | '()' { AbsGrammar.ELit1 }
     | '[]' { AbsGrammar.ELit2 }
Expr11 :: { Expr }
Expr11 : ELit { AbsGrammar.ELit $1 } | '(' Expr ')' { $2 }
Expr10 :: { Expr }
Expr10 : '-' Expr10 { AbsGrammar.ENeg $2 }
       | '!' Expr10 { AbsGrammar.ENot $2 }
       | Expr11 { $1 }
Expr9 :: { Expr }
Expr9 : Expr Expr10 { AbsGrammar.EFunApp $1 $2 } | Expr10 { $1 }
Expr8 :: { Expr }
Expr8 : Expr8 MulOp Expr9 { AbsGrammar.EMul $1 $2 $3 }
      | Expr9 { $1 }
Expr7 :: { Expr }
Expr7 : Expr7 AddOp Expr8 { AbsGrammar.EAdd $1 $2 $3 }
      | Expr8 { $1 }
Expr6 :: { Expr }
Expr6 : Expr6 RelOp Expr7 { AbsGrammar.ERel $1 $2 $3 }
      | Expr7 { $1 }
Expr5 :: { Expr }
Expr5 : Expr6 '&' Expr5 { AbsGrammar.EAnd $1 $3 } | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr5 '|' Expr4 { AbsGrammar.EOr $1 $3 } | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr4 '@' Expr3 { AbsGrammar.EUnion $1 $3 } | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 ':' Expr1 { AbsGrammar.EAppend $1 $3 }
      | '(' Expr ',' ListExpr ')' { AbsGrammar.ETuple $2 $4 }
      | '[' ListExpr ']' { AbsGrammar.EList $2 }
      | '(\\' ListArg '->' Expr ')' { AbsGrammar.ELambda (reverse $2) $4 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : 'if' Expr 'then' Expr 'else' Expr { AbsGrammar.EIf $2 $4 $6 }
      | 'let' Def 'in' Expr { AbsGrammar.ELet $2 $4 }
      | 'match' Expr 'with' '{' ListAlternative '}' { AbsGrammar.EMatch $2 $5 }
      | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 '::' Type { AbsGrammar.EType $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : Expr { (:[]) $1 } | Expr ',' ListExpr { (:) $1 $3 }
Alternative :: { Alternative }
Alternative : Pattern '->' Expr { AbsGrammar.MAlternative $1 $3 }
ListAlternative :: { [Alternative] }
ListAlternative : Alternative { (:[]) $1 }
                | Alternative ';' ListAlternative { (:) $1 $3 }
Pattern :: { Pattern }
Pattern : Ident { AbsGrammar.PIdent $1 }
        | '_' { AbsGrammar.PAny }
        | '(' Pattern ',' ListPattern ')' { AbsGrammar.PTuple $2 $4 }
        | '[' ListPattern ']' { AbsGrammar.PList $2 }
        | Integer '@' Pattern { AbsGrammar.PUnion $1 $3 }
        | Pattern ':' Pattern { AbsGrammar.PListHT $1 $3 }
ListPattern :: { [Pattern] }
ListPattern : Pattern { (:[]) $1 }
            | Pattern ',' ListPattern { (:) $1 $3 }
TBasic :: { TBasic }
TBasic : 'int' { AbsGrammar.TBasic_int }
       | 'bool' { AbsGrammar.TBasic_bool }
       | 'char' { AbsGrammar.TBasic_char }
       | 'void' { AbsGrammar.TBasic_void }
       | Ident { AbsGrammar.TBasicIdent $1 }
Type3 :: { Type }
Type3 : TBasic { AbsGrammar.TBasic $1 } | '(' Type ')' { $2 }
Type2 :: { Type }
Type2 : Type1 '*' Type2 { AbsGrammar.TProduct $1 $3 }
      | Type3 { $1 }
Type1 :: { Type }
Type1 : Type '+' Type1 { AbsGrammar.TUnion $1 $3 } | Type2 { $1 }
Type :: { Type }
Type : Type '->' Type { AbsGrammar.TFun $1 $3 }
     | '[' Type ']' { AbsGrammar.TList $2 }
     | Type1 { $1 }
Stream :: { Stream }
Stream : 'stream' Ident 'input' ListVDecl 'state' ListTopDef 'output' ListTopDef { AbsGrammar.Stream $2 $4 $6 $8 }
ListVDecl :: { [VDecl] }
ListVDecl : VDecl { (:[]) $1 } | VDecl ',' ListVDecl { (:) $1 $3 }
QIdent :: { QIdent }
QIdent : Ident '.' Ident { AbsGrammar.Qual $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

