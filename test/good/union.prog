/*Features: 
    algebraic, recursive, user-declared types
    int and bool arithmetic 
    anonymous and named recursive functions
    static name binding (prints 'a' instead of 'b')
    static typing and type reconstruction (g and x types)
    multi-level pattern matching
*/

type myunion = char + int + bool;
type myrecunion = myunion + myrecunion;

character = 'a';

f :: int -> int -> bool -> myrecunion;
f = (\a b c -> if a + b > 0 & c then 1 @ character else 2 @ a);

g a b c n = if n <= 0 then f a b c else 4 @ g a b c (n - 1);

character = 'b';

stream main
input
state
//    x :: myrecunion; //works with and without this definition (type is infered)
    x = x
output
    print = match x with {
        4 @ 4 @ 4 @ 1 @ c -> c
    };
    exit = !exit
initial
    print = 'x',
    exit = false,
    x = g (-2) 3 true 3

